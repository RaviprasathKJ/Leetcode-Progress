PL : https://leetcode.com/problems/minimum-falling-path-sum/description/

SL : https://leetcode.com/problems/minimum-falling-path-sum/solutions/4592261/dp-recursion-top-down-memoization-o-n-2



SOLUTION : 
 
   CPP:  
       Time complexity:O(n^m)
       Space complexity:O(n^m)

   class Solution {
        private:
        int solve(vector<vector<int>> &dp , vector<vector<int>> &matrix, int r , int c ){
            if(r == matrix.size()) return 0;
            if( ( c < 0 ) || ( c >= matrix[0].size() ) ) return 0 ;
            if(dp[r][c]!=INT_MAX) return dp[r][c] ;
            int sum = matrix[r][c] ;
            if(c == 0){
                return dp[r][c] = min( sum + solve(dp,matrix,r+1,c) , sum + solve(dp,matrix,r+1,c+1) ) ;
            }
            else if(c==matrix[0].size()-1){
                return dp[r][c] = min(sum + solve(dp,matrix,r+1,c) , sum + solve(dp,matrix,r+1,c-1) ) ;
            }
            else{
                return dp[r][c] = min(sum + solve(dp,matrix,r+1,c-1),min(sum + solve(dp,matrix,r+1,c),sum + solve(dp,matrix,r+1,c+1))) ; 
            }
        }

        public:
            int minFallingPathSum(vector<vector<int>>& matrix) {
                vector<vector<int>>dp(matrix.size(),vector<int>(matrix[0].size(),INT_MAX));
                int ans = INT_MAX ;
                for(int i = 0 ; i < matrix.size() ; i++){
                    ans = min(ans, solve(dp,matrix,0,i)) ;
                }
                return ans ;
            }
        };
    
    PYTHON BOTTOM-UP APPROACH DP

        python code  ippa tha panna
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        dp = []
        rows = len(matrix)
        cols = len(matrix[0])
        # Creation of dp array 
        for i in range(rows):
            temp = [float("inf")] * cols 
            dp.append(temp)

        ans = float("inf")
        # Base case for dp 
        for i in range(0, cols):
            dp[rows - 1][i] = matrix[rows - 1][i]

        for r in range(rows - 2, -1, -1):
            for c in range(0, cols):
                path_sum = matrix[r][c]
                if c == 0:
                    path_sum += min(dp[r + 1][c], dp[r + 1][c + 1])
                elif c == cols - 1:
                    path_sum += min(dp[r + 1][c - 1], dp[r + 1][c])
                else:
                    path_sum += min(dp[r + 1][c + 1], min(dp[r + 1][c], dp[r + 1][c - 1]))
                dp[r][c] = path_sum
        for i in dp[0]:
            ans = min(ans, i)
        return ans

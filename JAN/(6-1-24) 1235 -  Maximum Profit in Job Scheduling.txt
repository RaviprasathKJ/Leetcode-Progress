PL : https://leetcode.com/problems/maximum-profit-in-job-scheduling/?envType=daily-question&envId=2024-01-06
SL : https://leetcode.com/problems/maximum-profit-in-job-scheduling/solutions/4523201/dp-and-binary-search-lowerbound-cpp/


SOLUTION : 
 

  class Solution {
            private:

                int bs(vector<vector<int>> &job,int time){
                    int right = job.size()-1 , left = 0 , mid = (right+left)/2;
                    int ind = job.size();
                    while(left<=right){
                        mid = (left + right)/2;
                        if(job[mid][0]<time){
                            left = mid+1;
                        }
                        else if(job[mid][0]>=time){
                            right = mid-1; 
                            ind = mid ;
                        }
                    }
                    return ind;
                }


                int solve(int ind ,vector<int> &dp,vector<vector<int>> &job){
                    if(ind==job.size()) return 0 ;
                    if(dp[ind]!=-1) return dp[ind] ;
                    int nextIndex = bs(job,job[ind][1]);
                    int maxProfit =  max(solve(ind+1,dp,job),job[ind][2]+solve(nextIndex,dp,job));
                    return dp[ind] = maxProfit;
                }



            public:
            
                int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
                    int n = startTime.size();
                    vector<vector<int>>job(n,vector<int>(3,0));
                    vector<int>dp(n+1,-1);
                    for(int i = 0 ; i < n ; i++){
                            job[i][0] = startTime[i] ;
                            job[i][1] = endTime[i] ;
                            job[i][2] = profit[i] ;
                    }
                    sort(job.begin(),job.end());
                    return solve(0,dp,job);
                }
            };